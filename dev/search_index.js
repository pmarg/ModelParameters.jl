var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ModelParameters","category":"page"},{"location":"#ModelParameters","page":"Home","title":"ModelParameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ModelParameters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ModelParameters]\nOrder = [:type]","category":"page"},{"location":"#ModelParameters.AbstractParameter","page":"Home","title":"ModelParameters.AbstractParameter","text":"Abstract supertype for parameters. Currently, the subtypes are Parameters and BoundedParameter.\n\n\n\n\n\n","category":"type"},{"location":"#ModelParameters.AbstractParameterSet","page":"Home","title":"ModelParameters.AbstractParameterSet","text":"Abstract supertype for different definitions of parameter sets. Currently the subtypes are ParameterGroup and ParameterSpace. \n\n\n\n\n\n","category":"type"},{"location":"#ModelParameters.BoundedParameter","page":"Home","title":"ModelParameters.BoundedParameter","text":"A simple wrapper that contains the value of the parameter, the lower and upper bounds, and a description.\n\n\n\n\n\n","category":"type"},{"location":"#ModelParameters.Parameter","page":"Home","title":"ModelParameters.Parameter","text":"A simple wrapper that contains the value of the parameter and a description.\n\n\n\n\n\n","category":"type"},{"location":"#ModelParameters.ParameterGroup","page":"Home","title":"ModelParameters.ParameterGroup","text":"Abstract supertype for structs that contain multiple Parameters and/or BoundedParameters. Useful for printing a single struct that holds parameters.\n\n\n\n\n\n","category":"type"},{"location":"#ModelParameters.ParameterSpace","page":"Home","title":"ModelParameters.ParameterSpace","text":"Abstract supertype that contains all the parameters in the model. Useful for printing the parameter space.\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ModelParameters]\nOrder = [:function]","category":"page"},{"location":"#Base.getproperty-Tuple{ParameterGroup, Symbol}","page":"Home","title":"Base.getproperty","text":"Base.getproperty(name::ParameterGroup, val::Symbol)\n\nExtension of getproperty function in order to call the value of an AbstractParameter within a ParameterGroup as T.x instead of T.x.value\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, ParameterSpace}","page":"Home","title":"Base.show","text":"Extension of the Base.show function in order to print all the ParameterGroups, including the description in a readable format.\n\n\n\n\n\n","category":"method"},{"location":"#ModelParameters.:←-Tuple{Any, Tuple}","page":"Home","title":"ModelParameters.:←","text":"(←)(str, tpl::Tuple)\n\nSubstitutes the value of a single or multiple fields of struct str. The tuple has the form (field::Symbol, new_value). Returns the modified str.\n\n\n\n\n\n","category":"method"},{"location":"#ModelParameters.description-Tuple{ParameterGroup, Symbol}","page":"Home","title":"ModelParameters.description","text":"A function that returns the description of an AbstractParameter within a ParameterGroup. This is necessary because of the definition of getproperty for ParameterGroup that returns the value of the parameter instead of AbstractParameter. For example, T.x returns x.value and not x, which contains the description in the wrapper.\n\n\n\n\n\n","category":"method"},{"location":"#ModelParameters.get_bounds-Tuple{ParameterGroup, Symbol}","page":"Home","title":"ModelParameters.get_bounds","text":"get_bounds(name::ParameterGroup, val::Symbol)\n\nReturns the lower and upper bound of a single parameter withing a ParameterGroup. Useful for constrained optimization.\n\n\n\n\n\n","category":"method"},{"location":"#ModelParameters.get_initial_guess-Tuple{Array{Float64}}","page":"Home","title":"ModelParameters.get_initial_guess","text":"get_initial_guess(parameters::Array{Float64})\n\nReturns the values of parameter vector. Useful for initial guess for optimization.\n\n\n\n\n\n","category":"method"},{"location":"#ModelParameters.get_lower_bounds-Tuple{Array{Float64}}","page":"Home","title":"ModelParameters.get_lower_bounds","text":"get_lower_bounds(parameters::Array{Float64)\n\nReturns the lower bounds of parameter vector. Useful for constrained optimization.\n\n\n\n\n\n","category":"method"},{"location":"#ModelParameters.get_upper_bounds-Tuple{Array{Float64}}","page":"Home","title":"ModelParameters.get_upper_bounds","text":"get_upper_bounds(parameters::Array{Float64)\n\nReturns the upper bounds of parameter vector. Useful for constrained optimization.\n\n\n\n\n\n","category":"method"},{"location":"#ModelParameters.set-Tuple{Any, Symbol, Any}","page":"Home","title":"ModelParameters.set","text":"set(str,var::Symbol,val)\n\nSubstitutes the value a single field var with val. Returns the modified str.\n\n\n\n\n\n","category":"method"}]
}
